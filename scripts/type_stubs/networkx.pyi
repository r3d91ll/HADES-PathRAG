"""
Type stubs for NetworkX to provide proper typing information.
"""
from typing import (
    TypeVar, Generic, Dict, Any, List, 
    Iterable, Iterator, Mapping, Set, 
    Optional, Union, Tuple, Callable
)

# Type variables for node and edge data
N = TypeVar('N')
E = TypeVar('E')

class Graph(Generic[N]):
    """
    Base class for undirected graphs.
    """
    def __init__(self) -> None: ...
    
    def add_node(self, node_for_adding: N, **attr: Any) -> None: ...
    
    def add_nodes_from(self, nodes_for_adding: Iterable[N], **attr: Any) -> None: ...
    
    def remove_node(self, n: N) -> None: ...
    
    def add_edge(self, u_of_edge: N, v_of_edge: N, **attr: Any) -> None: ...
    
    def add_edges_from(self, ebunch_to_add: Iterable[Tuple[N, N]], **attr: Any) -> None: ...
    
    def has_node(self, n: N) -> bool: ...
    
    def nodes(self) -> Iterable[N]: ...
    
    def edges(self) -> Iterable[Tuple[N, N]]: ...
    
    def neighbors(self, n: N) -> Iterable[N]: ...
    
    def copy(self) -> 'Graph[N]': ...


class DiGraph(Graph[N]):
    """
    Base class for directed graphs.
    """
    def __init__(self) -> None: ...
    
    def in_edges(self, nbunch: Optional[N] = None, data: bool = False) -> Iterable[Tuple[N, N]]: ...
    
    def out_edges(self, nbunch: Optional[N] = None, data: bool = False) -> Iterable[Tuple[N, N]]: ...
    
    def predecessors(self, n: N) -> Iterable[N]: ...
    
    def successors(self, n: N) -> Iterable[N]: ...
    
    def copy(self) -> 'DiGraph[N]': ...
