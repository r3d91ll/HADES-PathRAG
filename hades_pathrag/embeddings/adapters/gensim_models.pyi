from typing import Any, Dict, List, Optional, Union

class KeyedVectors:
    def __init__(self, vector_size: int, count: int = 0, dtype: Any = ..., mapfile_path: Optional[str] = None) -> None: ...
    def __getitem__(self, key: Union[str, int]) -> Any: ...
    def __contains__(self, key: Union[str, int]) -> bool: ...
    def most_similar(self, positive: List[Union[str, int]] = [], negative: List[Union[str, int]] = [], topn: int = 10, restrict_vocab: Optional[int] = None, indexer: Any = None) -> List[tuple]: ...
    def similarity(self, w1: Union[str, int], w2: Union[str, int]) -> float: ...
    def save(self, fname_or_handle: str, **kwargs: Any) -> None: ...
    @classmethod
    def load(cls, fname_or_handle: str, **kwargs: Any) -> 'KeyedVectors': ...
