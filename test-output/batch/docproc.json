{
  "id": "markdown_3b85efcd_docproc.md",
  "source": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/docproc.md",
  "format": "markdown",
  "content_type": "text",
  "metadata": {
    "page_count": 0,
    "format": "markdown",
    "file_path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/docproc.md",
    "doc_type": "markdown",
    "source": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/docproc.md",
    "title": "Document Processing (docproc) Module",
    "authors": [],
    "date_published": "UNK",
    "publisher": "UNK",
    "content_type": "text"
  },
  "entities": [
    {
      "type": "heading_1",
      "name": "Document Processing (docproc) Module",
      "value": "Document Processing (docproc) Module",
      "level": 1,
      "start_pos": 0,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Overview",
      "value": "Overview",
      "level": 2,
      "start_pos": 40,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Table of Contents",
      "value": "Table of Contents",
      "level": 2,
      "start_pos": 433,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Architecture",
      "value": "Architecture",
      "level": 2,
      "start_pos": 800,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Supported Formats",
      "value": "Supported Formats",
      "level": 2,
      "start_pos": 1457,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Core Components",
      "value": "Core Components",
      "level": 2,
      "start_pos": 2866,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Format Detection",
      "value": "Format Detection",
      "level": 3,
      "start_pos": 2886,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Detect format from file path",
      "value": "Detect format from file path",
      "level": 1,
      "start_pos": 3109,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Detect format from content",
      "value": "Detect format from content",
      "level": 1,
      "start_pos": 3221,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Core Processing Functions",
      "value": "Core Processing Functions",
      "level": 3,
      "start_pos": 3413,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process a document file",
      "value": "Process a document file",
      "level": 1,
      "start_pos": 3597,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process text content",
      "value": "Process text content",
      "level": 1,
      "start_pos": 3675,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Adapters",
      "value": "Adapters",
      "level": 2,
      "start_pos": 3774,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Adapter Registry",
      "value": "Adapter Registry",
      "level": 3,
      "start_pos": 4887,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Get adapter for a specific format",
      "value": "Get adapter for a specific format",
      "level": 1,
      "start_pos": 5081,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Register a custom adapter",
      "value": "Register a custom adapter",
      "level": 1,
      "start_pos": 5151,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Integration with Pre-Processors",
      "value": "Integration with Pre-Processors",
      "level": 2,
      "start_pos": 5233,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Create an adapter for PDF processing",
      "value": "Create an adapter for PDF processing",
      "level": 1,
      "start_pos": 5501,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process a PDF file",
      "value": "Process a PDF file",
      "level": 1,
      "start_pos": 5595,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Usage Examples",
      "value": "Usage Examples",
      "level": 2,
      "start_pos": 5816,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Processing a PDF Document",
      "value": "Processing a PDF Document",
      "level": 3,
      "start_pos": 5835,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access structured content",
      "value": "Access structured content",
      "level": 1,
      "start_pos": 5969,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Convert to markdown for display",
      "value": "Convert to markdown for display",
      "level": 1,
      "start_pos": 6123,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Processing Code Files",
      "value": "Processing Code Files",
      "level": 3,
      "start_pos": 6192,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access code structure",
      "value": "Access code structure",
      "level": 1,
      "start_pos": 6317,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access relationships (e.g., function calls, imports)",
      "value": "Access relationships (e.g., function calls, imports)",
      "level": 1,
      "start_pos": 6546,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Batch Processing Multiple Files",
      "value": "Batch Processing Multiple Files",
      "level": 3,
      "start_pos": 6702,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Extension Points",
      "value": "Extension Points",
      "level": 2,
      "start_pos": 7090,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Register the adapter",
      "value": "Register the adapter",
      "level": 1,
      "start_pos": 7683,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "docproc",
      "language": "text",
      "start_pos": 59,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "docproc",
      "language": "text",
      "start_pos": 823,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "graph TD\n    A[Core Functions] --> B[Format Detection]\n    A --> C[Adapter Registry]\n    C --> D[Format-Specific Adapters]\n    D --> E[PDF Adapter]\n    D --> F[HTML Adapter]\n    D --> G[Code Adapter]\n    D --> H[JSON/YAML/XML Adapter]\n    D --> I[CSV Adapter]\n    D --> J[Text Adapter]\n    B --> C",
      "language": "text",
      "start_pos": 894,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "format_detector.py",
      "language": "text",
      "start_pos": 2914,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\n\n# Detect format from file path\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\n\n# Detect format from content\nwith open(\"/path/to/file.txt\", \"r\") as f:\n    content = f.read()\n    format_type = detect_format_from_content(content)  # Returns best guess based on content",
      "language": "text",
      "start_pos": 3006,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "core.py",
      "language": "text",
      "start_pos": 3450,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document, process_text\n\n# Process a document file\nresult = process_document(\"/path/to/document.pdf\")\n\n# Process text content\nresult = process_text(\"Some text content\", format_override=\"markdown\")",
      "language": "text",
      "start_pos": 3532,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "BaseAdapter",
      "language": "text",
      "start_pos": 3817,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "class BaseAdapter(ABC):\n    @abstractmethod\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process a file and return structured content\"\"\"\n        \n    @abstractmethod\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process text content and return structured content\"\"\"\n        \n    @abstractmethod\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Extract entities from content\"\"\"\n        \n    @abstractmethod\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Extract metadata from content\"\"\"\n        \n    @abstractmethod\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to markdown format\"\"\"\n        \n    @abstractmethod\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to plain text\"\"\"",
      "language": "text",
      "start_pos": 3851,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "adapter_registry.py",
      "language": "text",
      "start_pos": 4915,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.adapter_registry import get_adapter, register_adapter\n\n# Get adapter for a specific format\npdf_adapter = get_adapter(\"pdf\")\n\n# Register a custom adapter\nregister_adapter(\"custom_format\", CustomAdapter)",
      "language": "text",
      "start_pos": 5005,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.ingest.pre_processor.base_pre_processor import DocProcAdapter\nfrom src.docproc.core import process_document\n\n# Create an adapter for PDF processing\npdf_processor = DocProcAdapter(format_override=\"pdf\")\n\n# Process a PDF file\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")",
      "language": "text",
      "start_pos": 5379,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\n\nresult = process_document(\"/path/to/document.pdf\")\n\n# Access structured content\ntext = result[\"content\"]\nmetadata = result[\"metadata\"]\nentities = result[\"entities\"]\nrelationships = result[\"relationships\"]\n\n# Convert to markdown for display\nmarkdown = result[\"markdown\"]",
      "language": "text",
      "start_pos": 5866,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\n\nresult = process_document(\"/path/to/code.py\")\n\n# Access code structure\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\n\n# Access relationships (e.g., function calls, imports)\nfor rel in result[\"relationships\"]:\n    print(f\"{rel['source']} {rel['type']} {rel['target']}\")",
      "language": "text",
      "start_pos": 6219,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\nfrom pathlib import Path\n\ndirectory = Path(\"/path/to/documents\")\nresults = {}\n\nfor file_path in directory.glob(\"**/*.*\"):\n    try:\n        result = process_document(file_path)\n        results[str(file_path)] = result\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")",
      "language": "text",
      "start_pos": 6739,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.adapters.base import BaseAdapter\nfrom src.docproc.adapter_registry import register_adapter\n\nclass CustomAdapter(BaseAdapter):\n    # Implement required methods\n    \n    def process(self, file_path, options=None):\n        # Custom implementation\n        \n    # Implement other required methods\n\n# Register the adapter\nregister_adapter(\"custom_format\", CustomAdapter)",
      "language": "text",
      "start_pos": 7369,
      "confidence": 1.0
    },
    {
      "type": "table",
      "name": "table",
      "value": "| Format     | File Extensions       | Adapter         | Features                                            |\n|------------|-----------------------|-----------------|-----------------------------------------------------|\n| PDF        | .pdf                  | PDFAdapter      | Page extraction, table detection, figure extraction |\n| HTML       | .html, .htm           | HTMLAdapter     | Document structure, links, metadata                 |\n| Markdown   | .md, .markdown        | MarkdownAdapter | Headers, links, code blocks                         |\n| Python     | .py                   | CodeAdapter     | Functions, classes, imports, relationships          |\n| Other Code | .js, .ts, .java, etc. | CodeAdapter     | Language-specific parsing                           |\n| JSON       | .json                 | JSONAdapter     | Schema detection, field extraction                  |\n| YAML       | .yaml, .yml           | YAMLAdapter     | Schema detection, field extraction                  |\n| XML        | .xml                  | XMLAdapter      | Tag structure, attributes                           |\n| CSV        | .csv                  | CSVAdapter      | Headers, data types, row extraction                 |\n| Plain Text | .txt                  | TextAdapter     | Basic text extraction, paragraph detection          |\n",
      "start_pos": 1533,
      "confidence": 1.0
    }
  ],
  "content_format": "markdown",
  "content": "# Document Processing (docproc) Module\n\n## Overview\n\nThe \n\n```\ndocproc\n```\n\n module is a standalone, unified document processing system designed to handle various file formats and extract structured information with format-specific awareness. This module serves as the foundation for HADES-PathRAG's document ingestion pipeline and can be used independently for RAG systems, direct model inference, and processing chat attachments.\n\n## Table of Contents\n\n1. [&lt;RawText children='Architecture'&gt;]\n2. [&lt;RawText children='Supported Formats'&gt;]\n3. [&lt;RawText children='Core Components'&gt;]\n4. [&lt;RawText children='Adapters'&gt;]\n5. [&lt;RawText children='Integration with Pre-Processors'&gt;]\n6. [&lt;RawText children='Usage Examples'&gt;]\n7. [&lt;RawText children='Extension Points'&gt;]\n\n## Architecture\n\nThe \n\n```\ndocproc\n```\n\n module follows a robust adapter-based architecture:\n\n```\ngraph TD\n    A[Core Functions] --> B[Format Detection]\n    A --> C[Adapter Registry]\n    C --> D[Format-Specific Adapters]\n    D --> E[PDF Adapter]\n    D --> F[HTML Adapter]\n    D --> G[Code Adapter]\n    D --> H[JSON/YAML/XML Adapter]\n    D --> I[CSV Adapter]\n    D --> J[Text Adapter]\n    B --> C\n```\n\nKey design principles:\n\n- [&lt;RawText children='Format awareness'&gt;]\n- [&lt;RawText children='Unified interface'&gt;]\n- [&lt;RawText children='Extensibility'&gt;]\n- [&lt;RawText children='Error handling'&gt;]\n- [&lt;RawText children='Type safety'&gt;]\n\n## Supported Formats\n\nThe module currently supports the following formats:\n\n| Format     | File Extensions       | Adapter         | Features                                            |\n|------------|-----------------------|-----------------|-----------------------------------------------------|\n| PDF        | .pdf                  | PDFAdapter      | Page extraction, table detection, figure extraction |\n| HTML       | .html, .htm           | HTMLAdapter     | Document structure, links, metadata                 |\n| Markdown   | .md, .markdown        | MarkdownAdapter | Headers, links, code blocks                         |\n| Python     | .py                   | CodeAdapter     | Functions, classes, imports, relationships          |\n| Other Code | .js, .ts, .java, etc. | CodeAdapter     | Language-specific parsing                           |\n| JSON       | .json                 | JSONAdapter     | Schema detection, field extraction                  |\n| YAML       | .yaml, .yml           | YAMLAdapter     | Schema detection, field extraction                  |\n| XML        | .xml                  | XMLAdapter      | Tag structure, attributes                           |\n| CSV        | .csv                  | CSVAdapter      | Headers, data types, row extraction                 |\n| Plain Text | .txt                  | TextAdapter     | Basic text extraction, paragraph detection          |\n\n## Core Components\n\n### Format Detection\n\nThe \n\n```\nformat_detector.py\n```\n\n module provides utilities to detect the format of a document:\n\n```\nfrom src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\n\n# Detect format from file path\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\n\n# Detect format from content\nwith open(\"/path/to/file.txt\", \"r\") as f:\n    content = f.read()\n    format_type = detect_format_from_content(content)  # Returns best guess based on content\n```\n\n### Core Processing Functions\n\nThe \n\n```\ncore.py\n```\n\n module provides the main entry points for document processing:\n\n```\nfrom src.docproc.core import process_document, process_text\n\n# Process a document file\nresult = process_document(\"/path/to/document.pdf\")\n\n# Process text content\nresult = process_text(\"Some text content\", format_override=\"markdown\")\n```\n\n## Adapters\n\nEach adapter implements the \n\n```\nBaseAdapter\n```\n\n interface:\n\n```\nclass BaseAdapter(ABC):\n    @abstractmethod\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process a file and return structured content\"\"\"\n        \n    @abstractmethod\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process text content and return structured content\"\"\"\n        \n    @abstractmethod\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Extract entities from content\"\"\"\n        \n    @abstractmethod\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Extract metadata from content\"\"\"\n        \n    @abstractmethod\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to markdown format\"\"\"\n        \n    @abstractmethod\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to plain text\"\"\"\n```\n\n### Adapter Registry\n\nThe \n\n```\nadapter_registry.py\n```\n\n module manages the registration and retrieval of adapters:\n\n```\nfrom src.docproc.adapter_registry import get_adapter, register_adapter\n\n# Get adapter for a specific format\npdf_adapter = get_adapter(\"pdf\")\n\n# Register a custom adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\n## Integration with Pre-Processors\n\nThe document processing module integrates with the existing pre-processor system through an adapter pattern:\n\n```\nfrom src.ingest.pre_processor.base_pre_processor import DocProcAdapter\nfrom src.docproc.core import process_document\n\n# Create an adapter for PDF processing\npdf_processor = DocProcAdapter(format_override=\"pdf\")\n\n# Process a PDF file\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")\n```\n\nThe adapter pattern ensures backward compatibility while leveraging the improved document processing capabilities of the new module.\n\n## Usage Examples\n\n### Processing a PDF Document\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/document.pdf\")\n\n# Access structured content\ntext = result[\"content\"]\nmetadata = result[\"metadata\"]\nentities = result[\"entities\"]\nrelationships = result[\"relationships\"]\n\n# Convert to markdown for display\nmarkdown = result[\"markdown\"]\n```\n\n### Processing Code Files\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/code.py\")\n\n# Access code structure\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\n\n# Access relationships (e.g., function calls, imports)\nfor rel in result[\"relationships\"]:\n    print(f\"{rel['source']} {rel['type']} {rel['target']}\")\n```\n\n### Batch Processing Multiple Files\n\n```\nfrom src.docproc.core import process_document\nfrom pathlib import Path\n\ndirectory = Path(\"/path/to/documents\")\nresults = {}\n\nfor file_path in directory.glob(\"**/*.*\"):\n    try:\n        result = process_document(file_path)\n        results[str(file_path)] = result\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n```\n\n## Extension Points\n\nThe document processing module is designed to be easily extended:\n\n1. [&lt;RawText children='Add a new adapter'&gt;]\n2. [&lt;RawText children='Register the adapter'&gt;]\n3. [&lt;RawText children='Add format detection'&gt;]\n\nExample of adding a new adapter:\n\n```\nfrom src.docproc.adapters.base import BaseAdapter\nfrom src.docproc.adapter_registry import register_adapter\n\nclass CustomAdapter(BaseAdapter):\n    # Implement required methods\n    \n    def process(self, file_path, options=None):\n        # Custom implementation\n        \n    # Implement other required methods\n\n# Register the adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\nThis enables the system to handle new document formats with format-specific awareness.",
  "_validation_error": "2 validation errors for BaseDocument\nraw_content\n  Field required [type=missing, input_value={'id': 'markdown_3b85efcd...tic.dev/2.11/v/missing\"}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\nmetadata.language\n  Field required [type=missing, input_value={'page_count': 0, 'format... 'content_type': 'text'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"
}