{
  "id": "code_03eb9250",
  "source": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
  "format": "python",
  "content_type": "code",
  "version": "1.0.0",
  "timestamp": "2025-05-09T20:20:45.186576+00:00",
  "metadata": {
    "format": "python",
    "content_type": "code",
    "line_count": 120,
    "char_count": 4435,
    "has_module_docstring": true,
    "function_count": 1,
    "class_count": 1,
    "import_count": 2,
    "language": "python",
    "file_size": 4435,
    "file_path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
    "module_count": 1,
    "importfrom_count": 5,
    "method_count": 3
  },
  "entities": [
    {
      "type": "import",
      "value": "collections.defaultdict",
      "line": 8,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "os",
      "line": 9,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "fnmatch",
      "line": 10,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "typing.Dict",
      "line": 11,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "typing.List",
      "line": 11,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "typing.Set",
      "line": 11,
      "confidence": 1.0
    },
    {
      "type": "import",
      "value": "typing.Optional",
      "line": 11,
      "confidence": 1.0
    },
    {
      "type": "class",
      "value": "FileBatcher",
      "line": 13,
      "confidence": 1.0,
      "docstring": "Centralized file discovery and batching system for ingestion pipeline."
    },
    {
      "type": "function",
      "value": "collect_and_batch_files",
      "line": 104,
      "confidence": 1.0,
      "docstring": "Convenience function to collect and batch files from a directory.\n\nArgs:\n    root_dir: Root directory to scan\n    file_type_map: Optional mapping of file types to extensions\n    exclude_patterns: Optional list of patterns to exclude\n    \nReturns:\n    Dictionary mapping file types to lists of file paths"
    },
    {
      "type": "function",
      "value": "__init__",
      "line": 16,
      "confidence": 1.0,
      "docstring": "Initialize with file type mappings and exclusion patterns.\n\nArgs:\n    file_type_map: Dictionary mapping file types to extensions\n                   e.g., {'python': ['.py'], 'markdown': ['.md']}\n    exclude_patterns: List of glob patterns to exclude"
    },
    {
      "type": "function",
      "value": "collect_files",
      "line": 56,
      "confidence": 1.0,
      "docstring": "Scan directory once, returning files batched by type.\n\nArgs:\n    root_dir: Root directory to scan\n    \nReturns:\n    Dictionary mapping file types to lists of file paths"
    },
    {
      "type": "function",
      "value": "get_stats",
      "line": 89,
      "confidence": 1.0,
      "docstring": "Get statistics about the batched files.\n\nArgs:\n    batches: Output from collect_files()\n    \nReturns:\n    Dictionary with counts per file type and total"
    }
  ],
  "content_format": "python",
  "symbol_table": {
    "module_03eb9250": {
      "type": "module",
      "name": "file_batcher",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "docstring": "File batching utilities for preprocessing and ingestion.\n\nThis module provides a centralized system for file discovery and batching\nby file type to enable parallel processing in the ingestion pipeline.",
      "contains": [
        "import_143af56c",
        "import_abea9640",
        "import_df1f6682",
        "import_c72fab27",
        "import_c742d7f8",
        "import_57e6ca79",
        "import_c4b9ee1c",
        "class_14572b5a",
        "function_3a1921a5"
      ]
    },
    "import_143af56c": {
      "type": "importfrom",
      "name": "defaultdict",
      "asname": null,
      "module": "collections",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 8
    },
    "import_abea9640": {
      "type": "import",
      "name": "os",
      "asname": null,
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 9
    },
    "import_df1f6682": {
      "type": "import",
      "name": "fnmatch",
      "asname": null,
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 10
    },
    "import_c72fab27": {
      "type": "importfrom",
      "name": "Dict",
      "asname": null,
      "module": "typing",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 11
    },
    "import_c742d7f8": {
      "type": "importfrom",
      "name": "List",
      "asname": null,
      "module": "typing",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 11
    },
    "import_57e6ca79": {
      "type": "importfrom",
      "name": "Set",
      "asname": null,
      "module": "typing",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 11
    },
    "import_c4b9ee1c": {
      "type": "importfrom",
      "name": "Optional",
      "asname": null,
      "module": "typing",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line": 11
    },
    "class_14572b5a": {
      "type": "class",
      "name": "FileBatcher",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line_start": 13,
      "line_end": 101,
      "docstring": "Centralized file discovery and batching system for ingestion pipeline.",
      "bases": [],
      "methods": [
        "__init__",
        "collect_files",
        "get_stats"
      ],
      "contains": [
        "method_b68e35da",
        "method_fb1e3e47",
        "method_91cd7d6e"
      ]
    },
    "method_b68e35da": {
      "type": "method",
      "name": "__init__",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line_start": 16,
      "line_end": 54,
      "docstring": "Initialize with file type mappings and exclusion patterns.\n\nArgs:\n    file_type_map: Dictionary mapping file types to extensions\n                   e.g., {'python': ['.py'], 'markdown': ['.md']}\n    exclude_patterns: List of glob patterns to exclude",
      "args": [
        "self",
        "file_type_map",
        "exclude_patterns"
      ],
      "decorators": [],
      "returns": null,
      "calls": [
        "items"
      ],
      "parent_class": "class_14572b5a"
    },
    "method_fb1e3e47": {
      "type": "method",
      "name": "collect_files",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line_start": 56,
      "line_end": 87,
      "docstring": "Scan directory once, returning files batched by type.\n\nArgs:\n    root_dir: Root directory to scan\n    \nReturns:\n    Dictionary mapping file types to lists of file paths",
      "args": [
        "self",
        "root_dir"
      ],
      "decorators": [],
      "returns": null,
      "calls": [
        "defaultdict",
        "walk",
        "os.walk",
        "any",
        "fnmatch",
        "fnmatch.fnmatch",
        "relpath",
        "join",
        "relpath",
        "join",
        "any",
        "fnmatch",
        "fnmatch.fnmatch",
        "fnmatch",
        "fnmatch.fnmatch",
        "splitext",
        "lower",
        "ext.lower",
        "get",
        "join",
        "append",
        "dict"
      ],
      "parent_class": "class_14572b5a"
    },
    "method_91cd7d6e": {
      "type": "method",
      "name": "get_stats",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line_start": 89,
      "line_end": 101,
      "docstring": "Get statistics about the batched files.\n\nArgs:\n    batches: Output from collect_files()\n    \nReturns:\n    Dictionary with counts per file type and total",
      "args": [
        "self",
        "batches"
      ],
      "decorators": [],
      "returns": null,
      "calls": [
        "len",
        "items",
        "batches.items",
        "sum",
        "len",
        "values",
        "batches.values"
      ],
      "parent_class": "class_14572b5a"
    },
    "function_3a1921a5": {
      "type": "function",
      "name": "collect_and_batch_files",
      "path": "/home/todd/ML-Lab/Olympus/HADES-PathRAG/data/file_batcher.py",
      "line_start": 104,
      "line_end": 119,
      "docstring": "Convenience function to collect and batch files from a directory.\n\nArgs:\n    root_dir: Root directory to scan\n    file_type_map: Optional mapping of file types to extensions\n    exclude_patterns: Optional list of patterns to exclude\n    \nReturns:\n    Dictionary mapping file types to lists of file paths",
      "args": [
        "root_dir",
        "file_type_map",
        "exclude_patterns"
      ],
      "decorators": [],
      "returns": null,
      "calls": [
        "FileBatcher",
        "collect_files",
        "batcher.collect_files"
      ]
    }
  },
  "relationships": [
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_143af56c",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_abea9640",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_df1f6682",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_c72fab27",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_c742d7f8",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_57e6ca79",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "import_c4b9ee1c",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "class_14572b5a",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "module_03eb9250",
      "to_entity": "function_3a1921a5",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "class_14572b5a",
      "to_entity": "method_b68e35da",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "class_14572b5a",
      "to_entity": "method_fb1e3e47",
      "weight": 1.0
    },
    {
      "type": "CONTAINS",
      "from_entity": "class_14572b5a",
      "to_entity": "method_91cd7d6e",
      "weight": 1.0
    },
    {
      "type": "CALLS",
      "from_entity": "function_3a1921a5",
      "to_entity": "class_14572b5a",
      "weight": 0.8
    },
    {
      "type": "CALLS",
      "from_entity": "function_3a1921a5",
      "to_entity": "method_fb1e3e47",
      "weight": 0.8
    }
  ],
  "module_id": "module_03eb9250",
  "content": "\"\"\"\nFile batching utilities for preprocessing and ingestion.\n\nThis module provides a centralized system for file discovery and batching\nby file type to enable parallel processing in the ingestion pipeline.\n\"\"\"\n\nfrom collections import defaultdict\nimport os\nimport fnmatch\nfrom typing import Dict, List, Set, Optional\n\nclass FileBatcher:\n    \"\"\"Centralized file discovery and batching system for ingestion pipeline.\"\"\"\n    \n    def __init__(self, \n                 file_type_map: Optional[Dict[str, List[str]]] = None,\n                 exclude_patterns: Optional[List[str]] = None):\n        \"\"\"\n        Initialize with file type mappings and exclusion patterns.\n        \n        Args:\n            file_type_map: Dictionary mapping file types to extensions\n                           e.g., {'python': ['.py'], 'markdown': ['.md']}\n            exclude_patterns: List of glob patterns to exclude\n        \"\"\"\n        self.file_type_map = file_type_map or {\n            'python': ['.py'],\n            'javascript': ['.js', '.jsx', '.ts', '.tsx'],\n            'java': ['.java'],\n            'cpp': ['.cpp', '.hpp', '.cc', '.h'],\n            'markdown': ['.md', '.markdown'],\n            'pdf': ['.pdf'],\n            'json': ['.json'],\n            'csv': ['.csv'],\n            'text': ['.txt'],\n            'html': ['.html', '.htm'],\n            'xml': ['.xml'],\n        }\n        \n        # Reverse mapping for quick lookup: extension -> type\n        self.ext_to_type = {}\n        for file_type, extensions in self.file_type_map.items():\n            for ext in extensions:\n                self.ext_to_type[ext] = file_type\n                \n        self.exclude_patterns = exclude_patterns or [\n            '__pycache__', \n            '.git',\n            'node_modules',\n            'venv',\n            '.env',\n            '.DS_Store'\n        ]\n        \n    def collect_files(self, root_dir: str) -> Dict[str, List[str]]:\n        \"\"\"\n        Scan directory once, returning files batched by type.\n        \n        Args:\n            root_dir: Root directory to scan\n            \n        Returns:\n            Dictionary mapping file types to lists of file paths\n        \"\"\"\n        batches = defaultdict(list)\n        \n        for dirpath, dirnames, filenames in os.walk(root_dir):\n            # Exclude directories in-place\n            dirnames[:] = [d for d in dirnames if not any(\n                fnmatch.fnmatch(os.path.relpath(os.path.join(dirpath, d), root_dir), pattern) or pattern in d\n                for pattern in self.exclude_patterns\n            )]\n\n            for fname in filenames:\n                rel_file_path = os.path.relpath(os.path.join(dirpath, fname), root_dir)\n                # Exclude files based on patterns\n                if any(fnmatch.fnmatch(rel_file_path, pattern) or fnmatch.fnmatch(fname, pattern) or pattern in fname\n                       for pattern in self.exclude_patterns):\n                    continue\n                # Get file extension and determine type\n                _, ext = os.path.splitext(fname)\n                ext = ext.lower()\n                file_type = self.ext_to_type.get(ext, 'other')\n                fpath = os.path.join(dirpath, fname)\n                batches[file_type].append(fpath)\n        return dict(batches)\n    \n    def get_stats(self, batches: Dict[str, List[str]]) -> Dict[str, int]:\n        \"\"\"\n        Get statistics about the batched files.\n        \n        Args:\n            batches: Output from collect_files()\n            \n        Returns:\n            Dictionary with counts per file type and total\n        \"\"\"\n        stats = {file_type: len(files) for file_type, files in batches.items()}\n        stats['total'] = sum(len(files) for files in batches.values())\n        return stats\n\n\ndef collect_and_batch_files(root_dir: str, \n                           file_type_map: Optional[Dict[str, List[str]]] = None,\n                           exclude_patterns: Optional[List[str]] = None) -> Dict[str, List[str]]:\n    \"\"\"\n    Convenience function to collect and batch files from a directory.\n    \n    Args:\n        root_dir: Root directory to scan\n        file_type_map: Optional mapping of file types to extensions\n        exclude_patterns: Optional list of patterns to exclude\n        \n    Returns:\n        Dictionary mapping file types to lists of file paths\n    \"\"\"\n    batcher = FileBatcher(file_type_map, exclude_patterns)\n    return batcher.collect_files(root_dir)\n"
}