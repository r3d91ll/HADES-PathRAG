{
  "id": "markdown_bb91ffa3_docproc.md",
  "source": "data/docproc.md",
  "format": "markdown",
  "version": "1.0.0",
  "timestamp": "2025-05-09T13:56:56.674550",
  "metadata": {
    "page_count": 0,
    "format": "markdown",
    "file_path": "data/docproc.md",
    "doc_type": "markdown",
    "source": "data/docproc.md",
    "title": "Document Processing (docproc) Module",
    "authors": [],
    "date_published": "UNK",
    "publisher": "UNK"
  },
  "entities": [
    {
      "type": "heading_1",
      "name": "Document Processing (docproc) Module",
      "value": "Document Processing (docproc) Module",
      "level": 1,
      "start_pos": 0,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Overview",
      "value": "Overview",
      "level": 2,
      "start_pos": 40,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Table of Contents",
      "value": "Table of Contents",
      "level": 2,
      "start_pos": 433,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Architecture",
      "value": "Architecture",
      "level": 2,
      "start_pos": 800,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Supported Formats",
      "value": "Supported Formats",
      "level": 2,
      "start_pos": 1457,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Core Components",
      "value": "Core Components",
      "level": 2,
      "start_pos": 2866,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Format Detection",
      "value": "Format Detection",
      "level": 3,
      "start_pos": 2886,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Detect format from file path",
      "value": "Detect format from file path",
      "level": 1,
      "start_pos": 3109,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Detect format from content",
      "value": "Detect format from content",
      "level": 1,
      "start_pos": 3221,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Core Processing Functions",
      "value": "Core Processing Functions",
      "level": 3,
      "start_pos": 3413,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process a document file",
      "value": "Process a document file",
      "level": 1,
      "start_pos": 3597,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process text content",
      "value": "Process text content",
      "level": 1,
      "start_pos": 3675,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Adapters",
      "value": "Adapters",
      "level": 2,
      "start_pos": 3774,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Adapter Registry",
      "value": "Adapter Registry",
      "level": 3,
      "start_pos": 4887,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Get adapter for a specific format",
      "value": "Get adapter for a specific format",
      "level": 1,
      "start_pos": 5081,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Register a custom adapter",
      "value": "Register a custom adapter",
      "level": 1,
      "start_pos": 5151,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Integration with Pre-Processors",
      "value": "Integration with Pre-Processors",
      "level": 2,
      "start_pos": 5233,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Create an adapter for PDF processing",
      "value": "Create an adapter for PDF processing",
      "level": 1,
      "start_pos": 5501,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Process a PDF file",
      "value": "Process a PDF file",
      "level": 1,
      "start_pos": 5595,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Usage Examples",
      "value": "Usage Examples",
      "level": 2,
      "start_pos": 5816,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Processing a PDF Document",
      "value": "Processing a PDF Document",
      "level": 3,
      "start_pos": 5835,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access structured content",
      "value": "Access structured content",
      "level": 1,
      "start_pos": 5969,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Convert to markdown for display",
      "value": "Convert to markdown for display",
      "level": 1,
      "start_pos": 6123,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Processing Code Files",
      "value": "Processing Code Files",
      "level": 3,
      "start_pos": 6192,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access code structure",
      "value": "Access code structure",
      "level": 1,
      "start_pos": 6317,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Access relationships (e.g., function calls, imports)",
      "value": "Access relationships (e.g., function calls, imports)",
      "level": 1,
      "start_pos": 6546,
      "confidence": 1.0
    },
    {
      "type": "heading_3",
      "name": "Batch Processing Multiple Files",
      "value": "Batch Processing Multiple Files",
      "level": 3,
      "start_pos": 6702,
      "confidence": 1.0
    },
    {
      "type": "heading_2",
      "name": "Extension Points",
      "value": "Extension Points",
      "level": 2,
      "start_pos": 7090,
      "confidence": 1.0
    },
    {
      "type": "heading_1",
      "name": "Register the adapter",
      "value": "Register the adapter",
      "level": 1,
      "start_pos": 7683,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "docproc",
      "language": "text",
      "start_pos": 59,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "docproc",
      "language": "text",
      "start_pos": 823,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "graph TD\n    A[Core Functions] --> B[Format Detection]\n    A --> C[Adapter Registry]\n    C --> D[Format-Specific Adapters]\n    D --> E[PDF Adapter]\n    D --> F[HTML Adapter]\n    D --> G[Code Adapter]\n    D --> H[JSON/YAML/XML Adapter]\n    D --> I[CSV Adapter]\n    D --> J[Text Adapter]\n    B --> C",
      "language": "text",
      "start_pos": 894,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "format_detector.py",
      "language": "text",
      "start_pos": 2914,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\n\n# Detect format from file path\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\n\n# Detect format from content\nwith open(\"/path/to/file.txt\", \"r\") as f:\n    content = f.read()\n    format_type = detect_format_from_content(content)  # Returns best guess based on content",
      "language": "text",
      "start_pos": 3006,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "core.py",
      "language": "text",
      "start_pos": 3450,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document, process_text\n\n# Process a document file\nresult = process_document(\"/path/to/document.pdf\")\n\n# Process text content\nresult = process_text(\"Some text content\", format_override=\"markdown\")",
      "language": "text",
      "start_pos": 3532,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "BaseAdapter",
      "language": "text",
      "start_pos": 3817,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "class BaseAdapter(ABC):\n    @abstractmethod\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process a file and return structured content\"\"\"\n        \n    @abstractmethod\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process text content and return structured content\"\"\"\n        \n    @abstractmethod\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Extract entities from content\"\"\"\n        \n    @abstractmethod\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Extract metadata from content\"\"\"\n        \n    @abstractmethod\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to markdown format\"\"\"\n        \n    @abstractmethod\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to plain text\"\"\"",
      "language": "text",
      "start_pos": 3851,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "adapter_registry.py",
      "language": "text",
      "start_pos": 4915,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.adapter_registry import get_adapter, register_adapter\n\n# Get adapter for a specific format\npdf_adapter = get_adapter(\"pdf\")\n\n# Register a custom adapter\nregister_adapter(\"custom_format\", CustomAdapter)",
      "language": "text",
      "start_pos": 5005,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.ingest.pre_processor.base_pre_processor import DocProcAdapter\nfrom src.docproc.core import process_document\n\n# Create an adapter for PDF processing\npdf_processor = DocProcAdapter(format_override=\"pdf\")\n\n# Process a PDF file\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")",
      "language": "text",
      "start_pos": 5379,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\n\nresult = process_document(\"/path/to/document.pdf\")\n\n# Access structured content\ntext = result[\"content\"]\nmetadata = result[\"metadata\"]\nentities = result[\"entities\"]\nrelationships = result[\"relationships\"]\n\n# Convert to markdown for display\nmarkdown = result[\"markdown\"]",
      "language": "text",
      "start_pos": 5866,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\n\nresult = process_document(\"/path/to/code.py\")\n\n# Access code structure\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\n\n# Access relationships (e.g., function calls, imports)\nfor rel in result[\"relationships\"]:\n    print(f\"{rel['source']} {rel['type']} {rel['target']}\")",
      "language": "text",
      "start_pos": 6219,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.core import process_document\nfrom pathlib import Path\n\ndirectory = Path(\"/path/to/documents\")\nresults = {}\n\nfor file_path in directory.glob(\"**/*.*\"):\n    try:\n        result = process_document(file_path)\n        results[str(file_path)] = result\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")",
      "language": "text",
      "start_pos": 6739,
      "confidence": 1.0
    },
    {
      "type": "code_block",
      "name": "code_text",
      "value": "from src.docproc.adapters.base import BaseAdapter\nfrom src.docproc.adapter_registry import register_adapter\n\nclass CustomAdapter(BaseAdapter):\n    # Implement required methods\n    \n    def process(self, file_path, options=None):\n        # Custom implementation\n        \n    # Implement other required methods\n\n# Register the adapter\nregister_adapter(\"custom_format\", CustomAdapter)",
      "language": "text",
      "start_pos": 7369,
      "confidence": 1.0
    },
    {
      "type": "table",
      "name": "table",
      "value": "| Format     | File Extensions       | Adapter         | Features                                            |\n|------------|-----------------------|-----------------|-----------------------------------------------------|\n| PDF        | .pdf                  | PDFAdapter      | Page extraction, table detection, figure extraction |\n| HTML       | .html, .htm           | HTMLAdapter     | Document structure, links, metadata                 |\n| Markdown   | .md, .markdown        | MarkdownAdapter | Headers, links, code blocks                         |\n| Python     | .py                   | CodeAdapter     | Functions, classes, imports, relationships          |\n| Other Code | .js, .ts, .java, etc. | CodeAdapter     | Language-specific parsing                           |\n| JSON       | .json                 | JSONAdapter     | Schema detection, field extraction                  |\n| YAML       | .yaml, .yml           | YAMLAdapter     | Schema detection, field extraction                  |\n| XML        | .xml                  | XMLAdapter      | Tag structure, attributes                           |\n| CSV        | .csv                  | CSVAdapter      | Headers, data types, row extraction                 |\n| Plain Text | .txt                  | TextAdapter     | Basic text extraction, paragraph detection          |\n",
      "start_pos": 1533,
      "confidence": 1.0
    }
  ],
  "content_type": "markdown",
  "raw_content": "# Document Processing (docproc) Module\n\n## Overview\n\nThe \n\n```\ndocproc\n```\n\n module is a standalone, unified document processing system designed to handle various file formats and extract structured information with format-specific awareness. This module serves as the foundation for HADES-PathRAG's document ingestion pipeline and can be used independently for RAG systems, direct model inference, and processing chat attachments.\n\n## Table of Contents\n\n1. [&lt;RawText children='Architecture'&gt;]\n2. [&lt;RawText children='Supported Formats'&gt;]\n3. [&lt;RawText children='Core Components'&gt;]\n4. [&lt;RawText children='Adapters'&gt;]\n5. [&lt;RawText children='Integration with Pre-Processors'&gt;]\n6. [&lt;RawText children='Usage Examples'&gt;]\n7. [&lt;RawText children='Extension Points'&gt;]\n\n## Architecture\n\nThe \n\n```\ndocproc\n```\n\n module follows a robust adapter-based architecture:\n\n```\ngraph TD\n    A[Core Functions] --> B[Format Detection]\n    A --> C[Adapter Registry]\n    C --> D[Format-Specific Adapters]\n    D --> E[PDF Adapter]\n    D --> F[HTML Adapter]\n    D --> G[Code Adapter]\n    D --> H[JSON/YAML/XML Adapter]\n    D --> I[CSV Adapter]\n    D --> J[Text Adapter]\n    B --> C\n```\n\nKey design principles:\n\n- [&lt;RawText children='Format awareness'&gt;]\n- [&lt;RawText children='Unified interface'&gt;]\n- [&lt;RawText children='Extensibility'&gt;]\n- [&lt;RawText children='Error handling'&gt;]\n- [&lt;RawText children='Type safety'&gt;]\n\n## Supported Formats\n\nThe module currently supports the following formats:\n\n| Format     | File Extensions       | Adapter         | Features                                            |\n|------------|-----------------------|-----------------|-----------------------------------------------------|\n| PDF        | .pdf                  | PDFAdapter      | Page extraction, table detection, figure extraction |\n| HTML       | .html, .htm           | HTMLAdapter     | Document structure, links, metadata                 |\n| Markdown   | .md, .markdown        | MarkdownAdapter | Headers, links, code blocks                         |\n| Python     | .py                   | CodeAdapter     | Functions, classes, imports, relationships          |\n| Other Code | .js, .ts, .java, etc. | CodeAdapter     | Language-specific parsing                           |\n| JSON       | .json                 | JSONAdapter     | Schema detection, field extraction                  |\n| YAML       | .yaml, .yml           | YAMLAdapter     | Schema detection, field extraction                  |\n| XML        | .xml                  | XMLAdapter      | Tag structure, attributes                           |\n| CSV        | .csv                  | CSVAdapter      | Headers, data types, row extraction                 |\n| Plain Text | .txt                  | TextAdapter     | Basic text extraction, paragraph detection          |\n\n## Core Components\n\n### Format Detection\n\nThe \n\n```\nformat_detector.py\n```\n\n module provides utilities to detect the format of a document:\n\n```\nfrom src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\n\n# Detect format from file path\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\n\n# Detect format from content\nwith open(\"/path/to/file.txt\", \"r\") as f:\n    content = f.read()\n    format_type = detect_format_from_content(content)  # Returns best guess based on content\n```\n\n### Core Processing Functions\n\nThe \n\n```\ncore.py\n```\n\n module provides the main entry points for document processing:\n\n```\nfrom src.docproc.core import process_document, process_text\n\n# Process a document file\nresult = process_document(\"/path/to/document.pdf\")\n\n# Process text content\nresult = process_text(\"Some text content\", format_override=\"markdown\")\n```\n\n## Adapters\n\nEach adapter implements the \n\n```\nBaseAdapter\n```\n\n interface:\n\n```\nclass BaseAdapter(ABC):\n    @abstractmethod\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process a file and return structured content\"\"\"\n        \n    @abstractmethod\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process text content and return structured content\"\"\"\n        \n    @abstractmethod\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Extract entities from content\"\"\"\n        \n    @abstractmethod\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Extract metadata from content\"\"\"\n        \n    @abstractmethod\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to markdown format\"\"\"\n        \n    @abstractmethod\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to plain text\"\"\"\n```\n\n### Adapter Registry\n\nThe \n\n```\nadapter_registry.py\n```\n\n module manages the registration and retrieval of adapters:\n\n```\nfrom src.docproc.adapter_registry import get_adapter, register_adapter\n\n# Get adapter for a specific format\npdf_adapter = get_adapter(\"pdf\")\n\n# Register a custom adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\n## Integration with Pre-Processors\n\nThe document processing module integrates with the existing pre-processor system through an adapter pattern:\n\n```\nfrom src.ingest.pre_processor.base_pre_processor import DocProcAdapter\nfrom src.docproc.core import process_document\n\n# Create an adapter for PDF processing\npdf_processor = DocProcAdapter(format_override=\"pdf\")\n\n# Process a PDF file\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")\n```\n\nThe adapter pattern ensures backward compatibility while leveraging the improved document processing capabilities of the new module.\n\n## Usage Examples\n\n### Processing a PDF Document\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/document.pdf\")\n\n# Access structured content\ntext = result[\"content\"]\nmetadata = result[\"metadata\"]\nentities = result[\"entities\"]\nrelationships = result[\"relationships\"]\n\n# Convert to markdown for display\nmarkdown = result[\"markdown\"]\n```\n\n### Processing Code Files\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/code.py\")\n\n# Access code structure\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\n\n# Access relationships (e.g., function calls, imports)\nfor rel in result[\"relationships\"]:\n    print(f\"{rel['source']} {rel['type']} {rel['target']}\")\n```\n\n### Batch Processing Multiple Files\n\n```\nfrom src.docproc.core import process_document\nfrom pathlib import Path\n\ndirectory = Path(\"/path/to/documents\")\nresults = {}\n\nfor file_path in directory.glob(\"**/*.*\"):\n    try:\n        result = process_document(file_path)\n        results[str(file_path)] = result\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n```\n\n## Extension Points\n\nThe document processing module is designed to be easily extended:\n\n1. [&lt;RawText children='Add a new adapter'&gt;]\n2. [&lt;RawText children='Register the adapter'&gt;]\n3. [&lt;RawText children='Add format detection'&gt;]\n\nExample of adding a new adapter:\n\n```\nfrom src.docproc.adapters.base import BaseAdapter\nfrom src.docproc.adapter_registry import register_adapter\n\nclass CustomAdapter(BaseAdapter):\n    # Implement required methods\n    \n    def process(self, file_path, options=None):\n        # Custom implementation\n        \n    # Implement other required methods\n\n# Register the adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\nThis enables the system to handle new document formats with format-specific awareness.",
  "docling_document": "schema_name='DoclingDocument' version='1.3.0' name='docproc' origin=DocumentOrigin(mimetype='text/markdown', binary_hash=8906984259788713596, filename='docproc.md', uri=None) furniture=GroupItem(self_ref='#/furniture', parent=None, children=[], content_layer=<ContentLayer.FURNITURE: 'furniture'>, name='_root_', label=<GroupLabel.UNSPECIFIED: 'unspecified'>) body=GroupItem(self_ref='#/body', parent=None, children=[RefItem(cref='#/texts/0'), RefItem(cref='#/texts/1'), RefItem(cref='#/texts/2'), RefItem(cref='#/texts/3'), RefItem(cref='#/texts/4'), RefItem(cref='#/texts/5'), RefItem(cref='#/groups/0'), RefItem(cref='#/texts/13'), RefItem(cref='#/texts/14'), RefItem(cref='#/texts/15'), RefItem(cref='#/texts/16'), RefItem(cref='#/texts/17'), RefItem(cref='#/texts/18'), RefItem(cref='#/groups/1'), RefItem(cref='#/texts/24'), RefItem(cref='#/texts/25'), RefItem(cref='#/tables/0'), RefItem(cref='#/texts/26'), RefItem(cref='#/texts/27'), RefItem(cref='#/texts/28'), RefItem(cref='#/texts/29'), RefItem(cref='#/texts/30'), RefItem(cref='#/texts/31'), RefItem(cref='#/texts/32'), RefItem(cref='#/texts/33'), RefItem(cref='#/texts/34'), RefItem(cref='#/texts/35'), RefItem(cref='#/texts/36'), RefItem(cref='#/texts/37'), RefItem(cref='#/texts/38'), RefItem(cref='#/texts/39'), RefItem(cref='#/texts/40'), RefItem(cref='#/texts/41'), RefItem(cref='#/texts/42'), RefItem(cref='#/texts/43'), RefItem(cref='#/texts/44'), RefItem(cref='#/texts/45'), RefItem(cref='#/texts/46'), RefItem(cref='#/texts/47'), RefItem(cref='#/texts/48'), RefItem(cref='#/texts/49'), RefItem(cref='#/texts/50'), RefItem(cref='#/texts/51'), RefItem(cref='#/texts/52'), RefItem(cref='#/texts/53'), RefItem(cref='#/texts/54'), RefItem(cref='#/texts/55'), RefItem(cref='#/texts/56'), RefItem(cref='#/texts/57'), RefItem(cref='#/texts/58'), RefItem(cref='#/texts/59'), RefItem(cref='#/groups/2'), RefItem(cref='#/texts/63'), RefItem(cref='#/texts/64'), RefItem(cref='#/texts/65')], content_layer=<ContentLayer.BODY: 'body'>, name='_root_', label=<GroupLabel.UNSPECIFIED: 'unspecified'>) groups=[OrderedList(self_ref='#/groups/0', parent=RefItem(cref='#/body'), children=[RefItem(cref='#/texts/6'), RefItem(cref='#/texts/7'), RefItem(cref='#/texts/8'), RefItem(cref='#/texts/9'), RefItem(cref='#/texts/10'), RefItem(cref='#/texts/11'), RefItem(cref='#/texts/12')], content_layer=<ContentLayer.BODY: 'body'>, name='list', label=<GroupLabel.ORDERED_LIST: 'ordered_list'>), UnorderedList(self_ref='#/groups/1', parent=RefItem(cref='#/body'), children=[RefItem(cref='#/texts/19'), RefItem(cref='#/texts/20'), RefItem(cref='#/texts/21'), RefItem(cref='#/texts/22'), RefItem(cref='#/texts/23')], content_layer=<ContentLayer.BODY: 'body'>, name='list', label=<GroupLabel.LIST: 'list'>), OrderedList(self_ref='#/groups/2', parent=RefItem(cref='#/body'), children=[RefItem(cref='#/texts/60'), RefItem(cref='#/texts/61'), RefItem(cref='#/texts/62')], content_layer=<ContentLayer.BODY: 'body'>, name='list', label=<GroupLabel.ORDERED_LIST: 'ordered_list'>)] texts=[TitleItem(self_ref='#/texts/0', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.TITLE: 'title'>, prov=[], orig='Document Processing (docproc) Module', text='Document Processing (docproc) Module', formatting=None, hyperlink=None), SectionHeaderItem(self_ref='#/texts/1', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Overview', text='Overview', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/2', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The ', text='The ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/3', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='docproc', text='docproc', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/4', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=\" module is a standalone, unified document processing system designed to handle various file formats and extract structured information with format-specific awareness. This module serves as the foundation for HADES-PathRAG's document ingestion pipeline and can be used independently for RAG systems, direct model inference, and processing chat attachments.\", text=\" module is a standalone, unified document processing system designed to handle various file formats and extract structured information with format-specific awareness. This module serves as the foundation for HADES-PathRAG's document ingestion pipeline and can be used independently for RAG systems, direct model inference, and processing chat attachments.\", formatting=None, hyperlink=None), SectionHeaderItem(self_ref='#/texts/5', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Table of Contents', text='Table of Contents', formatting=None, hyperlink=None, level=1), ListItem(self_ref='#/texts/6', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Architecture'>]\", text=\"[<RawText children='Architecture'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/7', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Supported Formats'>]\", text=\"[<RawText children='Supported Formats'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/8', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Core Components'>]\", text=\"[<RawText children='Core Components'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/9', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Adapters'>]\", text=\"[<RawText children='Adapters'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/10', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Integration with Pre-Processors'>]\", text=\"[<RawText children='Integration with Pre-Processors'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/11', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Usage Examples'>]\", text=\"[<RawText children='Usage Examples'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/12', parent=RefItem(cref='#/groups/0'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Extension Points'>]\", text=\"[<RawText children='Extension Points'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), SectionHeaderItem(self_ref='#/texts/13', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Architecture', text='Architecture', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/14', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The ', text='The ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/15', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='docproc', text='docproc', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/16', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=' module follows a robust adapter-based architecture:', text=' module follows a robust adapter-based architecture:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/17', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='graph TD\\n    A[Core Functions] --> B[Format Detection]\\n    A --> C[Adapter Registry]\\n    C --> D[Format-Specific Adapters]\\n    D --> E[PDF Adapter]\\n    D --> F[HTML Adapter]\\n    D --> G[Code Adapter]\\n    D --> H[JSON/YAML/XML Adapter]\\n    D --> I[CSV Adapter]\\n    D --> J[Text Adapter]\\n    B --> C', text='graph TD\\n    A[Core Functions] --> B[Format Detection]\\n    A --> C[Adapter Registry]\\n    C --> D[Format-Specific Adapters]\\n    D --> E[PDF Adapter]\\n    D --> F[HTML Adapter]\\n    D --> G[Code Adapter]\\n    D --> H[JSON/YAML/XML Adapter]\\n    D --> I[CSV Adapter]\\n    D --> J[Text Adapter]\\n    B --> C', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/18', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='Key design principles:', text='Key design principles:', formatting=None, hyperlink=None), ListItem(self_ref='#/texts/19', parent=RefItem(cref='#/groups/1'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Format awareness'>]\", text=\"[<RawText children='Format awareness'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/20', parent=RefItem(cref='#/groups/1'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Unified interface'>]\", text=\"[<RawText children='Unified interface'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/21', parent=RefItem(cref='#/groups/1'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Extensibility'>]\", text=\"[<RawText children='Extensibility'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/22', parent=RefItem(cref='#/groups/1'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Error handling'>]\", text=\"[<RawText children='Error handling'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/23', parent=RefItem(cref='#/groups/1'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Type safety'>]\", text=\"[<RawText children='Type safety'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), SectionHeaderItem(self_ref='#/texts/24', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Supported Formats', text='Supported Formats', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/25', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The module currently supports the following formats:', text='The module currently supports the following formats:', formatting=None, hyperlink=None), SectionHeaderItem(self_ref='#/texts/26', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Core Components', text='Core Components', formatting=None, hyperlink=None, level=1), SectionHeaderItem(self_ref='#/texts/27', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Format Detection', text='Format Detection', formatting=None, hyperlink=None, level=2), TextItem(self_ref='#/texts/28', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The ', text='The ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/29', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='format_detector.py', text='format_detector.py', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/30', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=' module provides utilities to detect the format of a document:', text=' module provides utilities to detect the format of a document:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/31', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\\n\\n# Detect format from file path\\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\\n\\n# Detect format from content\\nwith open(\"/path/to/file.txt\", \"r\") as f:\\n    content = f.read()\\n    format_type = detect_format_from_content(content)  # Returns best guess based on content', text='from src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\\n\\n# Detect format from file path\\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\\n\\n# Detect format from content\\nwith open(\"/path/to/file.txt\", \"r\") as f:\\n    content = f.read()\\n    format_type = detect_format_from_content(content)  # Returns best guess based on content', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/32', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Core Processing Functions', text='Core Processing Functions', formatting=None, hyperlink=None, level=2), TextItem(self_ref='#/texts/33', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The ', text='The ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/34', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='core.py', text='core.py', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/35', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=' module provides the main entry points for document processing:', text=' module provides the main entry points for document processing:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/36', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.core import process_document, process_text\\n\\n# Process a document file\\nresult = process_document(\"/path/to/document.pdf\")\\n\\n# Process text content\\nresult = process_text(\"Some text content\", format_override=\"markdown\")', text='from src.docproc.core import process_document, process_text\\n\\n# Process a document file\\nresult = process_document(\"/path/to/document.pdf\")\\n\\n# Process text content\\nresult = process_text(\"Some text content\", format_override=\"markdown\")', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/37', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Adapters', text='Adapters', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/38', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='Each adapter implements the ', text='Each adapter implements the ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/39', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='BaseAdapter', text='BaseAdapter', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/40', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=' interface:', text=' interface:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/41', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='class BaseAdapter(ABC):\\n    @abstractmethod\\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\\n        \"\"\"Process a file and return structured content\"\"\"\\n        \\n    @abstractmethod\\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\\n        \"\"\"Process text content and return structured content\"\"\"\\n        \\n    @abstractmethod\\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\\n        \"\"\"Extract entities from content\"\"\"\\n        \\n    @abstractmethod\\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\\n        \"\"\"Extract metadata from content\"\"\"\\n        \\n    @abstractmethod\\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\\n        \"\"\"Convert content to markdown format\"\"\"\\n        \\n    @abstractmethod\\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\\n        \"\"\"Convert content to plain text\"\"\"', text='class BaseAdapter(ABC):\\n    @abstractmethod\\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\\n        \"\"\"Process a file and return structured content\"\"\"\\n        \\n    @abstractmethod\\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\\n        \"\"\"Process text content and return structured content\"\"\"\\n        \\n    @abstractmethod\\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\\n        \"\"\"Extract entities from content\"\"\"\\n        \\n    @abstractmethod\\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\\n        \"\"\"Extract metadata from content\"\"\"\\n        \\n    @abstractmethod\\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\\n        \"\"\"Convert content to markdown format\"\"\"\\n        \\n    @abstractmethod\\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\\n        \"\"\"Convert content to plain text\"\"\"', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/42', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Adapter Registry', text='Adapter Registry', formatting=None, hyperlink=None, level=2), TextItem(self_ref='#/texts/43', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The ', text='The ', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/44', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='adapter_registry.py', text='adapter_registry.py', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/45', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig=' module manages the registration and retrieval of adapters:', text=' module manages the registration and retrieval of adapters:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/46', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.adapter_registry import get_adapter, register_adapter\\n\\n# Get adapter for a specific format\\npdf_adapter = get_adapter(\"pdf\")\\n\\n# Register a custom adapter\\nregister_adapter(\"custom_format\", CustomAdapter)', text='from src.docproc.adapter_registry import get_adapter, register_adapter\\n\\n# Get adapter for a specific format\\npdf_adapter = get_adapter(\"pdf\")\\n\\n# Register a custom adapter\\nregister_adapter(\"custom_format\", CustomAdapter)', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/47', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Integration with Pre-Processors', text='Integration with Pre-Processors', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/48', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The document processing module integrates with the existing pre-processor system through an adapter pattern:', text='The document processing module integrates with the existing pre-processor system through an adapter pattern:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/49', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.ingest.pre_processor.base_pre_processor import DocProcAdapter\\nfrom src.docproc.core import process_document\\n\\n# Create an adapter for PDF processing\\npdf_processor = DocProcAdapter(format_override=\"pdf\")\\n\\n# Process a PDF file\\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")', text='from src.ingest.pre_processor.base_pre_processor import DocProcAdapter\\nfrom src.docproc.core import process_document\\n\\n# Create an adapter for PDF processing\\npdf_processor = DocProcAdapter(format_override=\"pdf\")\\n\\n# Process a PDF file\\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/50', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The adapter pattern ensures backward compatibility while leveraging the improved document processing capabilities of the new module.', text='The adapter pattern ensures backward compatibility while leveraging the improved document processing capabilities of the new module.', formatting=None, hyperlink=None), SectionHeaderItem(self_ref='#/texts/51', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Usage Examples', text='Usage Examples', formatting=None, hyperlink=None, level=1), SectionHeaderItem(self_ref='#/texts/52', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Processing a PDF Document', text='Processing a PDF Document', formatting=None, hyperlink=None, level=2), CodeItem(self_ref='#/texts/53', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.core import process_document\\n\\nresult = process_document(\"/path/to/document.pdf\")\\n\\n# Access structured content\\ntext = result[\"content\"]\\nmetadata = result[\"metadata\"]\\nentities = result[\"entities\"]\\nrelationships = result[\"relationships\"]\\n\\n# Convert to markdown for display\\nmarkdown = result[\"markdown\"]', text='from src.docproc.core import process_document\\n\\nresult = process_document(\"/path/to/document.pdf\")\\n\\n# Access structured content\\ntext = result[\"content\"]\\nmetadata = result[\"metadata\"]\\nentities = result[\"entities\"]\\nrelationships = result[\"relationships\"]\\n\\n# Convert to markdown for display\\nmarkdown = result[\"markdown\"]', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/54', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Processing Code Files', text='Processing Code Files', formatting=None, hyperlink=None, level=2), CodeItem(self_ref='#/texts/55', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.core import process_document\\n\\nresult = process_document(\"/path/to/code.py\")\\n\\n# Access code structure\\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\\n\\n# Access relationships (e.g., function calls, imports)\\nfor rel in result[\"relationships\"]:\\n    print(f\"{rel[\\'source\\']} {rel[\\'type\\']} {rel[\\'target\\']}\")', text='from src.docproc.core import process_document\\n\\nresult = process_document(\"/path/to/code.py\")\\n\\n# Access code structure\\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\\n\\n# Access relationships (e.g., function calls, imports)\\nfor rel in result[\"relationships\"]:\\n    print(f\"{rel[\\'source\\']} {rel[\\'type\\']} {rel[\\'target\\']}\")', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/56', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Batch Processing Multiple Files', text='Batch Processing Multiple Files', formatting=None, hyperlink=None, level=2), CodeItem(self_ref='#/texts/57', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.core import process_document\\nfrom pathlib import Path\\n\\ndirectory = Path(\"/path/to/documents\")\\nresults = {}\\n\\nfor file_path in directory.glob(\"**/*.*\"):\\n    try:\\n        result = process_document(file_path)\\n        results[str(file_path)] = result\\n    except Exception as e:\\n        print(f\"Error processing {file_path}: {e}\")', text='from src.docproc.core import process_document\\nfrom pathlib import Path\\n\\ndirectory = Path(\"/path/to/documents\")\\nresults = {}\\n\\nfor file_path in directory.glob(\"**/*.*\"):\\n    try:\\n        result = process_document(file_path)\\n        results[str(file_path)] = result\\n    except Exception as e:\\n        print(f\"Error processing {file_path}: {e}\")', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), SectionHeaderItem(self_ref='#/texts/58', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.SECTION_HEADER: 'section_header'>, prov=[], orig='Extension Points', text='Extension Points', formatting=None, hyperlink=None, level=1), TextItem(self_ref='#/texts/59', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='The document processing module is designed to be easily extended:', text='The document processing module is designed to be easily extended:', formatting=None, hyperlink=None), ListItem(self_ref='#/texts/60', parent=RefItem(cref='#/groups/2'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Add a new adapter'>]\", text=\"[<RawText children='Add a new adapter'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/61', parent=RefItem(cref='#/groups/2'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Register the adapter'>]\", text=\"[<RawText children='Register the adapter'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), ListItem(self_ref='#/texts/62', parent=RefItem(cref='#/groups/2'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.LIST_ITEM: 'list_item'>, prov=[], orig=\"[<RawText children='Add format detection'>]\", text=\"[<RawText children='Add format detection'>]\", formatting=None, hyperlink=None, enumerated=False, marker='-'), TextItem(self_ref='#/texts/63', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='Example of adding a new adapter:', text='Example of adding a new adapter:', formatting=None, hyperlink=None), CodeItem(self_ref='#/texts/64', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.CODE: 'code'>, prov=[], orig='from src.docproc.adapters.base import BaseAdapter\\nfrom src.docproc.adapter_registry import register_adapter\\n\\nclass CustomAdapter(BaseAdapter):\\n    # Implement required methods\\n    \\n    def process(self, file_path, options=None):\\n        # Custom implementation\\n        \\n    # Implement other required methods\\n\\n# Register the adapter\\nregister_adapter(\"custom_format\", CustomAdapter)', text='from src.docproc.adapters.base import BaseAdapter\\nfrom src.docproc.adapter_registry import register_adapter\\n\\nclass CustomAdapter(BaseAdapter):\\n    # Implement required methods\\n    \\n    def process(self, file_path, options=None):\\n        # Custom implementation\\n        \\n    # Implement other required methods\\n\\n# Register the adapter\\nregister_adapter(\"custom_format\", CustomAdapter)', formatting=None, hyperlink=None, captions=[], references=[], footnotes=[], image=None, code_language=<CodeLanguageLabel.UNKNOWN: 'unknown'>), TextItem(self_ref='#/texts/65', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.PARAGRAPH: 'paragraph'>, prov=[], orig='This enables the system to handle new document formats with format-specific awareness.', text='This enables the system to handle new document formats with format-specific awareness.', formatting=None, hyperlink=None)] pictures=[] tables=[TableItem(self_ref='#/tables/0', parent=RefItem(cref='#/body'), children=[], content_layer=<ContentLayer.BODY: 'body'>, label=<DocItemLabel.TABLE: 'table'>, prov=[], captions=[], references=[], footnotes=[], image=None, data=TableData(table_cells=[TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=0, end_col_offset_idx=1, text='Format', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=1, end_col_offset_idx=2, text='File Extensions', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=2, end_col_offset_idx=3, text='Adapter', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=3, end_col_offset_idx=4, text='Features', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=0, end_col_offset_idx=1, text='PDF', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=1, end_col_offset_idx=2, text='.pdf', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=2, end_col_offset_idx=3, text='PDFAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=3, end_col_offset_idx=4, text='Page extraction, table detection, figure extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=0, end_col_offset_idx=1, text='HTML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=1, end_col_offset_idx=2, text='.html, .htm', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=2, end_col_offset_idx=3, text='HTMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=3, end_col_offset_idx=4, text='Document structure, links, metadata', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=0, end_col_offset_idx=1, text='Markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=1, end_col_offset_idx=2, text='.md, .markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=2, end_col_offset_idx=3, text='MarkdownAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, links, code blocks', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=0, end_col_offset_idx=1, text='Python', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=1, end_col_offset_idx=2, text='.py', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=3, end_col_offset_idx=4, text='Functions, classes, imports, relationships', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=0, end_col_offset_idx=1, text='Other Code', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=1, end_col_offset_idx=2, text='.js, .ts, .java, etc.', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=3, end_col_offset_idx=4, text='Language-specific parsing', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=0, end_col_offset_idx=1, text='JSON', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=1, end_col_offset_idx=2, text='.json', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=2, end_col_offset_idx=3, text='JSONAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=0, end_col_offset_idx=1, text='YAML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=1, end_col_offset_idx=2, text='.yaml, .yml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=2, end_col_offset_idx=3, text='YAMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=0, end_col_offset_idx=1, text='XML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=1, end_col_offset_idx=2, text='.xml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=2, end_col_offset_idx=3, text='XMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=3, end_col_offset_idx=4, text='Tag structure, attributes', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=0, end_col_offset_idx=1, text='CSV', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=1, end_col_offset_idx=2, text='.csv', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=2, end_col_offset_idx=3, text='CSVAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, data types, row extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=0, end_col_offset_idx=1, text='Plain Text', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=1, end_col_offset_idx=2, text='.txt', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=2, end_col_offset_idx=3, text='TextAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=3, end_col_offset_idx=4, text='Basic text extraction, paragraph detection', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=0, end_col_offset_idx=1, text='Format', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=1, end_col_offset_idx=2, text='File Extensions', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=2, end_col_offset_idx=3, text='Adapter', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=3, end_col_offset_idx=4, text='Features', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=0, end_col_offset_idx=1, text='PDF', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=1, end_col_offset_idx=2, text='.pdf', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=2, end_col_offset_idx=3, text='PDFAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=3, end_col_offset_idx=4, text='Page extraction, table detection, figure extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=0, end_col_offset_idx=1, text='HTML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=1, end_col_offset_idx=2, text='.html, .htm', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=2, end_col_offset_idx=3, text='HTMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=3, end_col_offset_idx=4, text='Document structure, links, metadata', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=0, end_col_offset_idx=1, text='Markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=1, end_col_offset_idx=2, text='.md, .markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=2, end_col_offset_idx=3, text='MarkdownAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, links, code blocks', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=0, end_col_offset_idx=1, text='Python', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=1, end_col_offset_idx=2, text='.py', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=3, end_col_offset_idx=4, text='Functions, classes, imports, relationships', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=0, end_col_offset_idx=1, text='Other Code', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=1, end_col_offset_idx=2, text='.js, .ts, .java, etc.', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=3, end_col_offset_idx=4, text='Language-specific parsing', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=0, end_col_offset_idx=1, text='JSON', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=1, end_col_offset_idx=2, text='.json', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=2, end_col_offset_idx=3, text='JSONAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=0, end_col_offset_idx=1, text='YAML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=1, end_col_offset_idx=2, text='.yaml, .yml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=2, end_col_offset_idx=3, text='YAMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=0, end_col_offset_idx=1, text='XML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=1, end_col_offset_idx=2, text='.xml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=2, end_col_offset_idx=3, text='XMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=3, end_col_offset_idx=4, text='Tag structure, attributes', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=0, end_col_offset_idx=1, text='CSV', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=1, end_col_offset_idx=2, text='.csv', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=2, end_col_offset_idx=3, text='CSVAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, data types, row extraction', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=0, end_col_offset_idx=1, text='Plain Text', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=1, end_col_offset_idx=2, text='.txt', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=2, end_col_offset_idx=3, text='TextAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=3, end_col_offset_idx=4, text='Basic text extraction, paragraph detection', column_header=False, row_header=False, row_section=False)], num_rows=11, num_cols=4, grid=[[TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=0, end_col_offset_idx=1, text='Format', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=1, end_col_offset_idx=2, text='File Extensions', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=2, end_col_offset_idx=3, text='Adapter', column_header=True, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=0, end_row_offset_idx=1, start_col_offset_idx=3, end_col_offset_idx=4, text='Features', column_header=True, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=0, end_col_offset_idx=1, text='PDF', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=1, end_col_offset_idx=2, text='.pdf', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=2, end_col_offset_idx=3, text='PDFAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=1, end_row_offset_idx=2, start_col_offset_idx=3, end_col_offset_idx=4, text='Page extraction, table detection, figure extraction', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=0, end_col_offset_idx=1, text='HTML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=1, end_col_offset_idx=2, text='.html, .htm', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=2, end_col_offset_idx=3, text='HTMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=2, end_row_offset_idx=3, start_col_offset_idx=3, end_col_offset_idx=4, text='Document structure, links, metadata', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=0, end_col_offset_idx=1, text='Markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=1, end_col_offset_idx=2, text='.md, .markdown', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=2, end_col_offset_idx=3, text='MarkdownAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=3, end_row_offset_idx=4, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, links, code blocks', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=0, end_col_offset_idx=1, text='Python', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=1, end_col_offset_idx=2, text='.py', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=4, end_row_offset_idx=5, start_col_offset_idx=3, end_col_offset_idx=4, text='Functions, classes, imports, relationships', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=0, end_col_offset_idx=1, text='Other Code', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=1, end_col_offset_idx=2, text='.js, .ts, .java, etc.', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=2, end_col_offset_idx=3, text='CodeAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=5, end_row_offset_idx=6, start_col_offset_idx=3, end_col_offset_idx=4, text='Language-specific parsing', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=0, end_col_offset_idx=1, text='JSON', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=1, end_col_offset_idx=2, text='.json', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=2, end_col_offset_idx=3, text='JSONAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=6, end_row_offset_idx=7, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=0, end_col_offset_idx=1, text='YAML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=1, end_col_offset_idx=2, text='.yaml, .yml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=2, end_col_offset_idx=3, text='YAMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=7, end_row_offset_idx=8, start_col_offset_idx=3, end_col_offset_idx=4, text='Schema detection, field extraction', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=0, end_col_offset_idx=1, text='XML', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=1, end_col_offset_idx=2, text='.xml', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=2, end_col_offset_idx=3, text='XMLAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=8, end_row_offset_idx=9, start_col_offset_idx=3, end_col_offset_idx=4, text='Tag structure, attributes', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=0, end_col_offset_idx=1, text='CSV', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=1, end_col_offset_idx=2, text='.csv', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=2, end_col_offset_idx=3, text='CSVAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=9, end_row_offset_idx=10, start_col_offset_idx=3, end_col_offset_idx=4, text='Headers, data types, row extraction', column_header=False, row_header=False, row_section=False)], [TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=0, end_col_offset_idx=1, text='Plain Text', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=1, end_col_offset_idx=2, text='.txt', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=2, end_col_offset_idx=3, text='TextAdapter', column_header=False, row_header=False, row_section=False), TableCell(bbox=None, row_span=1, col_span=1, start_row_offset_idx=10, end_row_offset_idx=11, start_col_offset_idx=3, end_col_offset_idx=4, text='Basic text extraction, paragraph detection', column_header=False, row_header=False, row_section=False)]]))] key_value_items=[] form_items=[] pages={}",
  "content": "# Document Processing (docproc) Module\n\n## Overview\n\nThe \n\n```\ndocproc\n```\n\n module is a standalone, unified document processing system designed to handle various file formats and extract structured information with format-specific awareness. This module serves as the foundation for HADES-PathRAG's document ingestion pipeline and can be used independently for RAG systems, direct model inference, and processing chat attachments.\n\n## Table of Contents\n\n1. [&lt;RawText children='Architecture'&gt;]\n2. [&lt;RawText children='Supported Formats'&gt;]\n3. [&lt;RawText children='Core Components'&gt;]\n4. [&lt;RawText children='Adapters'&gt;]\n5. [&lt;RawText children='Integration with Pre-Processors'&gt;]\n6. [&lt;RawText children='Usage Examples'&gt;]\n7. [&lt;RawText children='Extension Points'&gt;]\n\n## Architecture\n\nThe \n\n```\ndocproc\n```\n\n module follows a robust adapter-based architecture:\n\n```\ngraph TD\n    A[Core Functions] --> B[Format Detection]\n    A --> C[Adapter Registry]\n    C --> D[Format-Specific Adapters]\n    D --> E[PDF Adapter]\n    D --> F[HTML Adapter]\n    D --> G[Code Adapter]\n    D --> H[JSON/YAML/XML Adapter]\n    D --> I[CSV Adapter]\n    D --> J[Text Adapter]\n    B --> C\n```\n\nKey design principles:\n\n- [&lt;RawText children='Format awareness'&gt;]\n- [&lt;RawText children='Unified interface'&gt;]\n- [&lt;RawText children='Extensibility'&gt;]\n- [&lt;RawText children='Error handling'&gt;]\n- [&lt;RawText children='Type safety'&gt;]\n\n## Supported Formats\n\nThe module currently supports the following formats:\n\n| Format     | File Extensions       | Adapter         | Features                                            |\n|------------|-----------------------|-----------------|-----------------------------------------------------|\n| PDF        | .pdf                  | PDFAdapter      | Page extraction, table detection, figure extraction |\n| HTML       | .html, .htm           | HTMLAdapter     | Document structure, links, metadata                 |\n| Markdown   | .md, .markdown        | MarkdownAdapter | Headers, links, code blocks                         |\n| Python     | .py                   | CodeAdapter     | Functions, classes, imports, relationships          |\n| Other Code | .js, .ts, .java, etc. | CodeAdapter     | Language-specific parsing                           |\n| JSON       | .json                 | JSONAdapter     | Schema detection, field extraction                  |\n| YAML       | .yaml, .yml           | YAMLAdapter     | Schema detection, field extraction                  |\n| XML        | .xml                  | XMLAdapter      | Tag structure, attributes                           |\n| CSV        | .csv                  | CSVAdapter      | Headers, data types, row extraction                 |\n| Plain Text | .txt                  | TextAdapter     | Basic text extraction, paragraph detection          |\n\n## Core Components\n\n### Format Detection\n\nThe \n\n```\nformat_detector.py\n```\n\n module provides utilities to detect the format of a document:\n\n```\nfrom src.docproc.utils.format_detector import detect_format_from_path, detect_format_from_content\n\n# Detect format from file path\nformat_type = detect_format_from_path(\"/path/to/document.pdf\")  # Returns \"pdf\"\n\n# Detect format from content\nwith open(\"/path/to/file.txt\", \"r\") as f:\n    content = f.read()\n    format_type = detect_format_from_content(content)  # Returns best guess based on content\n```\n\n### Core Processing Functions\n\nThe \n\n```\ncore.py\n```\n\n module provides the main entry points for document processing:\n\n```\nfrom src.docproc.core import process_document, process_text\n\n# Process a document file\nresult = process_document(\"/path/to/document.pdf\")\n\n# Process text content\nresult = process_text(\"Some text content\", format_override=\"markdown\")\n```\n\n## Adapters\n\nEach adapter implements the \n\n```\nBaseAdapter\n```\n\n interface:\n\n```\nclass BaseAdapter(ABC):\n    @abstractmethod\n    def process(self, file_path: Path, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process a file and return structured content\"\"\"\n        \n    @abstractmethod\n    def process_text(self, text: str, options: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\"Process text content and return structured content\"\"\"\n        \n    @abstractmethod\n    def extract_entities(self, content: Union[str, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Extract entities from content\"\"\"\n        \n    @abstractmethod\n    def extract_metadata(self, content: Union[str, Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Extract metadata from content\"\"\"\n        \n    @abstractmethod\n    def convert_to_markdown(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to markdown format\"\"\"\n        \n    @abstractmethod\n    def convert_to_text(self, content: Union[str, Dict[str, Any]]) -> str:\n        \"\"\"Convert content to plain text\"\"\"\n```\n\n### Adapter Registry\n\nThe \n\n```\nadapter_registry.py\n```\n\n module manages the registration and retrieval of adapters:\n\n```\nfrom src.docproc.adapter_registry import get_adapter, register_adapter\n\n# Get adapter for a specific format\npdf_adapter = get_adapter(\"pdf\")\n\n# Register a custom adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\n## Integration with Pre-Processors\n\nThe document processing module integrates with the existing pre-processor system through an adapter pattern:\n\n```\nfrom src.ingest.pre_processor.base_pre_processor import DocProcAdapter\nfrom src.docproc.core import process_document\n\n# Create an adapter for PDF processing\npdf_processor = DocProcAdapter(format_override=\"pdf\")\n\n# Process a PDF file\nresult = pdf_processor.process_file(\"/path/to/document.pdf\")\n```\n\nThe adapter pattern ensures backward compatibility while leveraging the improved document processing capabilities of the new module.\n\n## Usage Examples\n\n### Processing a PDF Document\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/document.pdf\")\n\n# Access structured content\ntext = result[\"content\"]\nmetadata = result[\"metadata\"]\nentities = result[\"entities\"]\nrelationships = result[\"relationships\"]\n\n# Convert to markdown for display\nmarkdown = result[\"markdown\"]\n```\n\n### Processing Code Files\n\n```\nfrom src.docproc.core import process_document\n\nresult = process_document(\"/path/to/code.py\")\n\n# Access code structure\nfunctions = [e for e in result[\"entities\"] if e[\"type\"] == \"function\"]\nclasses = [e for e in result[\"entities\"] if e[\"type\"] == \"class\"]\nimports = [e for e in result[\"entities\"] if e[\"type\"] == \"import\"]\n\n# Access relationships (e.g., function calls, imports)\nfor rel in result[\"relationships\"]:\n    print(f\"{rel['source']} {rel['type']} {rel['target']}\")\n```\n\n### Batch Processing Multiple Files\n\n```\nfrom src.docproc.core import process_document\nfrom pathlib import Path\n\ndirectory = Path(\"/path/to/documents\")\nresults = {}\n\nfor file_path in directory.glob(\"**/*.*\"):\n    try:\n        result = process_document(file_path)\n        results[str(file_path)] = result\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n```\n\n## Extension Points\n\nThe document processing module is designed to be easily extended:\n\n1. [&lt;RawText children='Add a new adapter'&gt;]\n2. [&lt;RawText children='Register the adapter'&gt;]\n3. [&lt;RawText children='Add format detection'&gt;]\n\nExample of adding a new adapter:\n\n```\nfrom src.docproc.adapters.base import BaseAdapter\nfrom src.docproc.adapter_registry import register_adapter\n\nclass CustomAdapter(BaseAdapter):\n    # Implement required methods\n    \n    def process(self, file_path, options=None):\n        # Custom implementation\n        \n    # Implement other required methods\n\n# Register the adapter\nregister_adapter(\"custom_format\", CustomAdapter)\n```\n\nThis enables the system to handle new document formats with format-specific awareness."
}